name: Reusable workflow example

env:
  something: This is from reusable-action

on:
  workflow_call:
    inputs:
      some-input:
        required: true
        type: string
      environment:
        required: false
        type: string
        default: dev
    secrets:
      token:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/labeler@v4
        with:
          repo-token: ${{ secrets.token }}
          configuration-path: ${{ inputs.some-input }}

      - run: echo "No environment"

      - run: echo ${{ env.something }}
      - run: echo ${{ env.something_else }}

      - run: echo ${{ inputs.some-input }}

      - run: echo ${{ vars.whatever_locally }}
      - run: echo ${{ secrets.whatever_locally }}
      - run: echo ${{ secrets.token }}

      - run: echo ${{ vars.whatever_other_action }}

      - run: echo ${{ secrets.secret_secret }}

      - run: |
          cat << EOF 
          ${{ toJson(vars) }}
          EOF

      - uses: actions/github-script@v7
        if: inputs.environment == 'prod'
        env:
          deployment_variables: ${{ toJson(vars) }}
          deployment_secrets: ${{ toJson(secrets) }}
          prefix: ''
        with:
          script: |
            const allVars = JSON.parse(process.env.deployment_variables)
            const allSecrets = JSON.parse(process.env.deployment_secrets)
            const prefix = process.env.prefix
            const varPrefix = `${prefix}TFSO_`
            const secretPrefix = `${prefix}TFSO_SECRET`

            const vars = Object.keys(allVars)
                .filter(key => key.startsWith(varPrefix) && !key.startsWith(secretPrefix))
                .map(key => ({
                    key: key,
                    value: allVars[key]
                }))
            const secrets = Object.keys(allSecrets)
                .filter(key => key.startsWith(secretPrefix))
                .map(key => ({
                    key: key,
                    value: allSecrets[key]
                }))

            for (const { key, value } of [...vars, ...secrets]) {
                core.exportVariable(key, value)
            }

  dev:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - uses: actions/github-script@v7
        if: inputs.environment == 'prod'
        env:
          ENVIRONMENT: ${{ inputs.environment }}
        with:
          script: |
            const res = await github.rest.repos.getEnvironment({
              repo: context.repo.repo,
              owner: context.repo.owner,
              environment_name: process.env.ENVIRONMENT
            })
            if (res?.data?.protection_rules?.some(rule => rule.type === 'required_reviewers')) {
                console.log('âœ… Production environment has required reviewers protection rule')
            } else {
                core.setFailed('Production environment must have required reviewers protection rule')
            }
      - run: echo ${{ inputs.some-input }}
      - run: echo ${{ env.something }}
      - run: echo ${{ env.something_else }}

      - run: echo ${{ vars.whatever_locally }}
      - run: echo ${{ secrets.whatever_locally }}
      - run: echo ${{ secrets.token }}

      - run: echo ${{ vars.whatever_other_action }}

      - run: |
          cat << EOF 
          ${{ toJson(vars) }}
          EOF
      - run: |
          cat << EOF 
          ${{ toJson(env) }}
          EOF
